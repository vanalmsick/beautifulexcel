var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"BeautifulExcel","text":"<p>\u26a0\ufe0f\ud83c\udfd7\ufe0f\ufe0f Note: This is only the first version - actively working on additional features!</p> <p>BeautifulExcel is a python package that makes it easy and quick to save pandas dataframes in beautifully formatted excel files. BeautifulExcel is the Openpyxl for Data Scientists with a deadline.</p> <p></p>"},{"location":"index.html#pandas-vs-beautifulexcel-to_excel","title":"Pandas vs. BeautifulExcel .to_excel()","text":"Pandas BeautifulExcel <code>df.to_excel(writer, sheet_name='My Output')</code> <code>writer.to_excel(df, sheet_name='My Output')</code> Raw, unformatted data that requires lots of additional formatting. Quickly export beautifully styled table with only one line of code!"},{"location":"index.html#getting-it","title":"Getting it","text":"<p><pre><code>$ pip install beautifulexcel\n</code></pre> Update Package: (execute regularly to get the latest features) <pre><code>$ pip install beautifulexcel --upgrade\n</code></pre></p> <p></p>"},{"location":"index.html#how-to-use","title":"How to use:","text":"<pre><code>from beautifulexcel import ExcelWriter\n\nwith ExcelWriter('workbook.xlsx', mode='r', theme='elegant_blue') as writer:\n    ws1 = writer.to_excel(\n        df,\n        sheet_name='My Sheet',\n        startrow=0,\n        startcol=0,\n        index=True,\n        header=True,\n        col_autofit=True,  # automatically change column width to fit content best\n        col_widths={'A': 20, 'RoE': 40},  # define column width manually\n        auto_number_formatting=True,  # automatically detect number format and change excel format\n        style={'RoE': 'bg_light_blue', 'D:E': {'fill': 'FFEEB7'}},  # apply custom styling to this dataframe export\n        use_theme_style=True,  # apply the excel workbook \"theme\" set in ExcelWriter()\n    )\n</code></pre>"},{"location":"index.html#find-out-more-about","title":"Find out more about:","text":"<ul> <li> <p> beautifulexcel.ExcelWriter('workbook.xlsx')</p> <p>Find out more about aguments for beautifulexcel.ExcelWriter(...)</p> <p> beautifulexcel.ExcelWriter()</p> </li> <li> <p> writer.to_excel(df, sheet_name='My Sheet')</p> <p>Find out more about aguments for writer.to_excel(...)</p> <p> writer.to_excel()</p> </li> <li> <p> Styling &amp; Themes</p> <p>Change the colors, fonts, sizes, borders and more with a few lines</p> <p> Customization</p> </li> <li> <p> Additional functions for sheets</p> <p>Learn more about further functions to e.g. merge cells, group columns/rows and more</p> <p> sheet1.function_a()</p> </li> </ul> <p></p>"},{"location":"ExcelWriter.html","title":"class beautifulexcel.ExcelWriter()","text":"<p>Class for writing DataFrame objects into excel sheets.</p> Example <p>Output pandas dataframe quickly with beautiful formatting.</p> <pre><code>from beautifulexcel import ExcelWriter\n\nwith ExcelWriter('workbook.xlsx', mode='r', style='elegant_blue') as writer:\n    ws1 = writer.to_excel(df1, sheetname='My Sheet', mode='a', startrow=0, startcol=0)\n    ws2 = writer.to_excel(df2, sheetname='My Sheet', mode='a', startrow=20, startcol=0)\n</code></pre>"},{"location":"ExcelWriter.html#beautifulexcel.ExcelWriter.__init__","title":"<code>__init__(file, mode='replace', if_sheet_exists='replace', theme='elegant_blue', ref_warnings=True, date_format=None, datetime_format=None, engine_kwargs={}, **kwargs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>Path to xls or xlsx or ods file</p> required <code>mode</code> <code>str</code> <p>If the file already exists you can either \"replace\" or \"modify\" it</p> <code>'replace'</code> <code>if_sheet_exists</code> <code>str</code> <p>If a excel sheet already exists raise an \"error\", create a \"new\" sheet with a different name, \"replace\" the existing sheet with the new one, or \"overlay\" the new contents with the old ones</p> <code>'replace'</code> <code>theme</code> <code>str</code> <p>Excel style name or path to theme yaml file</p> <code>'elegant_blue'</code> <code>date_format</code> <code>str</code> <p>Format string for dates written into Excel files (e. g. 'YYYY-MM-DD')</p> <code>None</code> <code>datetime_format</code> <code>str</code> <p>Format string for datetime objects written into Excel files. (e. g. 'YYYY-MM-DD HH:MM:SS')</p> <code>None</code> <code>engine_kwargs</code> <code>str</code> <p>keywords passed though to openpyxl in \"replace\"-mode: openpyxl.Workbook(engine_kwargs); \"modify\"-mode: openpyxl.load_workbook(file, engine_kwargs)</p> <code>{}</code> Example <pre><code>from beautifulexcel import ExcelWriter\n\nwith ExcelWriter('workbook.xlsx', mode='r', style='elegant_blue') as writer:\n    ...\n</code></pre>"},{"location":"ExcelWriter.html#beautifulexcel.ExcelWriter.to_excel","title":"<code>to_excel(df, sheet_name, startrow=0, startcol=0, index=False, header=True, style={}, use_base_style=True, col_widths={}, col_autofit=True, auto_number_formatting=True)</code>","text":"<p>Export pandas Datafame to excel.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Pandas Dataframe to export</p> required <code>sheet_name</code> <code>str</code> <p>Sheet name</p> required <code>startrow</code> <code>int</code> <p>Upper left cell row to dump dataframe (zero indexed)</p> <code>0</code> <code>startcol</code> <code>int</code> <p>Upper left cell column to dump data rame (zero indexed)</p> <code>0</code> <code>index</code> <code>bool</code> <p>Write row names/index as first column/s</p> <code>False</code> <code>header</code> <code>bool</code> <p>Write column names/header as first row/s</p> <code>True</code> <code>style</code> <code>dict</code> <p>Style dictionary with key referencing the cell/column/row and value the style to apply e.g. {'RoE': 'bg_light_blue', 'D:E': {'fill': 'FFEEB7'}}</p> <code>{}</code> <code>use_base_style</code> <code>bool</code> <p>Apply the excel workbook \"theme\" set in ExcelWriter()</p> <code>True</code> <code>col_widths</code> <code>dict</code> <p>Define column widths manually with key referencing the column and value the width e.g. {'A:C': 20, 'F': 10, 'employees': 40}</p> <code>{}</code> <code>col_autofit</code> <code>bool</code> <p>Automatically change column width to fit content best</p> <code>True</code> <code>auto_number_formatting</code> <code>bool</code> <p>Automatically detect number format and change excel format</p> <code>True</code> <p>Returns:</p> Type Description <code>DataframeSheet</code> <p>beautifulexcel.DataframeSheet</p> Example <pre><code>from beautifulexcel import ExcelWriter\n\nwith ExcelWriter('workbook.xlsx', mode='r', style='elegant_blue') as writer:\n    ws1 = writer.to_excel(df1, sheetname='My Sheet', mode='a', startrow=0, startcol=0)\n</code></pre>"},{"location":"Sheet.html","title":"class Sheet() &amp; DataframeSheet()","text":""},{"location":"Sheet.html#class-sheet","title":"class Sheet()","text":"<p>Base Excel Sheet Class which contains all the methods that can be applied to a sheet</p>"},{"location":"Sheet.html#beautifulexcel.writer.Sheet.merge_cells","title":"<code>merge_cells(ref)</code>","text":"<p>Merge several cells</p> <p>Parameters:</p> Name Type Description Default <code>ref</code> <code>str</code> <p>Cell range reference e.g. 'A1:C5'</p> required Example <p><code>sheet1.merge_cells(ref='A1:C5')</code></p>"},{"location":"Sheet.html#beautifulexcel.writer.Sheet.group_columns","title":"<code>group_columns(ref)</code>","text":"<p>Group several columns</p> <p>Parameters:</p> Name Type Description Default <code>ref</code> <code>str</code> <p>Excel column reference e.g. 'A:C'</p> required Example <p><code>sheet1.group_columns(ref='1:2')</code></p>"},{"location":"Sheet.html#beautifulexcel.writer.Sheet.group_rows","title":"<code>group_rows(ref)</code>","text":"<p>Group several rows</p> <p>Parameters:</p> Name Type Description Default <code>ref</code> <code>str</code> <p>Excel row reference e.g. '1:3'</p> required Example <p><code>sheet1.group_rows(ref='1:5')</code></p>"},{"location":"Sheet.html#beautifulexcel.writer.Sheet.add_data_validation","title":"<code>add_data_validation(ref, type, props=None, operator=None, **kwargs)</code>","text":"<p>Add data validation to worksheet</p> <p>Parameters:</p> Name Type Description Default <code>ref</code> <code>str or list of str</code> <p>Cell range reference e.g. \"A1:C5\" or [\"A1:C5\", \"A21:Z55\"]</p> required <code>type</code> <code>str</code> <p>Data valiation type. Options: list, whole, decimal, date, time, textLength, formula</p> required <code>operator</code> <code>str</code> <p>Validation mathematical operator: \"between\", \"greaterThan\", \"greaterThanOrEqual\", \"equal\", \"notEqual\", \"lessThan\", \"lessThanOrEqual\"</p> <code>None</code> <code>props</code> <code>any</code> <p>Depending on vaildation type the properties: list = [\"Option 1\", \"Option 2\"], numeric = single number OR upper &amp; lower boundary (1, 100), formla</p> <code>None</code> <code>kwargs</code> <code>dict</code> <p>Any futher kwarg specified in openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.datavalidation.html</p> <code>{}</code> <p>Examples:</p> <ul> <li><code>sheet1.add_data_validation(ref=\"A1:C5\", type=\"whole\")</code></li> <li><code>sheet1.add_data_validation(ref=\"A1:C5\", type=\"decimal\", operator=\"greaterThan\", props=0)</code></li> <li><code>sheet1.add_data_validation(ref=\"A1:C5\", type=\"textLength\", props=10)</code></li> <li><code>sheet1.add_data_validation(ref=\"A1:C5\", type=\"list\", props=[\"Yes\", \"No\"])</code></li> <li><code>sheet1.add_data_validation(ref=\"A1:C5\", type=\"whole\", operator=\"between\", props=[0, 100])</code></li> </ul>"},{"location":"Sheet.html#class-dataframesheet","title":"class DataframeSheet()","text":"<p>               Bases: <code>Sheet</code></p> <p>DataFrame Excel Sheet class containing all logic specific to dataframe exports</p> <p>Note: All methods/function of the class Sheet also work for this class DataframeSheet</p>"},{"location":"Sheet.html#beautifulexcel.writer.DataframeSheet.add_data_validation","title":"<code>add_data_validation(ref, type, props=None, operator=None, **kwargs)</code>","text":"<p>Add data validation to worksheet</p> <p>Parameters:</p> Name Type Description Default <code>ref</code> <code>str or list of str</code> <p>Cell range reference e.g. \"A1:C5\" or \"employees\" or [\"A1:C5\", \"A21:Z55\", \"employees:RoE\"]</p> required <code>type</code> <code>str</code> <p>Data valiation type. Options: list, whole, decimal, date, time, textLength, formula</p> required <code>operator</code> <code>str</code> <p>Validation mathematical operator: \"between\", \"greaterThan\", \"greaterThanOrEqual\", \"equal\", \"notEqual\", \"lessThan\", \"lessThanOrEqual\"</p> <code>None</code> <code>props</code> <code>any</code> <p>Depending on vaildation type the properties: list = [\"Option 1\", \"Option 2\"], numeric = single number OR upper &amp; lower boundary (1, 100), formla</p> <code>None</code> <code>kwargs</code> <code>dict</code> <p>Any futher kwarg specified in openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.datavalidation.html</p> <code>{}</code> <p>Examples:</p> <ul> <li><code>sheet1.add_data_validation(ref=\"employees\", type=\"whole\")</code></li> <li><code>sheet1.add_data_validation(ref=\"A1:C5\", type=\"whole\")</code></li> <li><code>sheet1.add_data_validation(ref=\"RoE\", type=\"decimal\", operator=\"greaterThan\", props=0)</code></li> <li><code>sheet1.add_data_validation(ref=\"A1:C5\", type=\"textLength\", props=10)</code></li> <li><code>sheet1.add_data_validation(ref=\"A1:C5\", type=\"list\", props=[\"Yes\", \"No\"])</code></li> <li><code>sheet1.add_data_validation(ref=\"A1:C5\", type=\"whole\", operator=\"between\", props=[0, 100])</code></li> </ul>"},{"location":"change_log.html","title":"Changelog &amp; ToDos","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"change_log.html#known-bugs","title":"Known bugs","text":"<ul> <li>None</li> </ul>"},{"location":"change_log.html#034-2024-10-04","title":"[0.3.4] - 2024-10-04","text":""},{"location":"change_log.html#added","title":"Added","text":"<ul> <li>ws.write_cell() and ws.write_cells()</li> </ul>"},{"location":"change_log.html#033-2024-10-04","title":"[0.3.3] - 2024-10-04","text":""},{"location":"change_log.html#fixed","title":"Fixed","text":"<ul> <li>Fixed py-3.7 compability</li> </ul>"},{"location":"change_log.html#031-032-2024-09-21","title":"[0.3.1-0.3.2] - 2024-09-21","text":""},{"location":"change_log.html#added_1","title":"Added","text":"<ul> <li>Improved documentation</li> </ul>"},{"location":"change_log.html#030-2024-09-15","title":"[0.3.0] - 2024-09-15","text":""},{"location":"change_log.html#added_2","title":"Added","text":"<ul> <li>Added data validation .add_data_validation()</li> <li>Added .merge_cells()</li> <li>Added .group_columns() and .group_rows()</li> <li>Added documentation for beautifulexcel.ExcelWriter()</li> </ul>"},{"location":"change_log.html#fixed_1","title":"Fixed","text":"<ul> <li>Refactored cell reference translation</li> </ul>"},{"location":"change_log.html#028-029-2024-09-14","title":"[0.2.8-0.2.9] - 2024-09-14","text":""},{"location":"change_log.html#fixed_2","title":"Fixed","text":"<ul> <li>Sometimes cell styles get overridden by the base styles</li> <li>Improved code style by adding Sheet &amp; DataframeSheet classes</li> </ul>"},{"location":"change_log.html#023-027-2024-09-13","title":"[0.2.3-0.2.7] - 2024-09-13","text":""},{"location":"change_log.html#fixed_3","title":"Fixed","text":"<ul> <li>Fixed import error in package</li> <li>Fixed missing .yml theme files in package</li> </ul>"},{"location":"change_log.html#022-2024-09-10","title":"[0.2.2] - 2024-09-10","text":""},{"location":"change_log.html#add","title":"Add","text":"<ul> <li>Add themes \"elegant_green\", \"elegant_yellow\"</li> </ul>"},{"location":"change_log.html#021-2024-09-09","title":"[0.2.1] - 2024-09-09","text":""},{"location":"change_log.html#fixed_4","title":"Fixed","text":"<ul> <li>Fix package version in Github workflow for deploying to PyPi.org</li> </ul>"},{"location":"change_log.html#020-2024-09-09","title":"[0.2.0] - 2024-09-09","text":""},{"location":"change_log.html#added_3","title":"Added","text":"<ul> <li>Add column_width kwarg</li> <li>Add border and protection cell styling</li> </ul>"},{"location":"change_log.html#fixed_5","title":"Fixed","text":"<ul> <li>Improved README quick-start guide</li> </ul>"},{"location":"change_log.html#011-2024-09-08","title":"[0.1.1] - 2024-09-08","text":""},{"location":"change_log.html#fixed_6","title":"Fixed","text":"<ul> <li>README images on PyPi.org were not showing correctly</li> </ul>"},{"location":"change_log.html#010-2024-09-08","title":"[0.1.0] - 2024-09-08","text":""},{"location":"change_log.html#added_4","title":"Added","text":"<ul> <li>First version with basic features</li> </ul>"},{"location":"change_log.html#still-todo","title":"Still ToDo","text":"<ul> <li>Add easy option to add formulas</li> <li>Add named styles styling</li> <li>Add conditional formatting</li> <li>Implement df.styler.to_excel()</li> <li>Add table definition</li> <li>Add data filtering</li> <li>Add more doc strings</li> <li>Improve documentation</li> <li>Avoid warning about using .save() method</li> <li>Add charts</li> </ul>"},{"location":"getting_started.html","title":"Getting Started","text":""},{"location":"getting_started.html#getting-it","title":"Getting it","text":"<p><pre><code>$ pip install beautifulexcel\n</code></pre> Update Package: (execute regularly to get the latest features) <pre><code>$ pip install beautifulexcel --upgrade\n</code></pre></p> <p></p>"},{"location":"getting_started.html#how-to-use","title":"How to use:","text":"<pre><code>from beautifulexcel import ExcelWriter\n\nwith ExcelWriter('workbook.xlsx', mode='r', theme='elegant_blue') as writer:\n    ws1 = writer.to_excel(\n        df,\n        sheet_name='My Sheet',\n        startrow=0,\n        startcol=0,\n        index=True,\n        header=True,\n        col_autofit=True,  # automatically change column width to fit content best\n        col_widths={'A': 20, 'RoE': 40},  # define column width manually\n        auto_number_formatting=True,  # automatically detect number format and change excel format\n        style={'RoE': 'bg_light_blue', 'D:E': {'fill': 'FFEEB7'}},  # apply custom styling to this dataframe export\n        use_theme_style=True,  # apply the excel workbook \"theme\" set in ExcelWriter()\n    )\n</code></pre>"},{"location":"getting_started.html#find-out-more-about","title":"Find out more about:","text":"<ul> <li> <p> beautifulexcel.ExcelWriter('workbook.xlsx')</p> <p>Find out more about aguments for beautifulexcel.ExcelWriter(...)</p> <p> beautifulexcel.ExcelWriter()</p> </li> <li> <p> writer.to_excel(df, sheet_name='My Sheet')</p> <p>Find out more about aguments for writer.to_excel(...)</p> <p> writer.to_excel()</p> </li> <li> <p> Styling &amp; Themes</p> <p>Change the colors, fonts, sizes, borders and more with a few lines</p> <p> Customization</p> </li> <li> <p> Additional functions for sheets</p> <p>Learn more about further functions to e.g. merge cells, group columns/rows and more</p> <p> sheet1.function_a()</p> </li> </ul> <p></p>"},{"location":"styling.html","title":"How to apply cell sytling?","text":""},{"location":"styling.html#style-add-style-ing-to-individual-dataframe-exports","title":"Style: Add \"style\"-ing to individual dataframe exports","text":"<p>In <code>writer.to_excel(df, ..., style={})</code> you can define specific styling kwargs for that specific table. The style dictionary syntax is:</p> dictionary key:reference the column, row, or cell dictionary value:provide formatting specs Options:<ul><li>df column name<ul><li>single coumn 'emplyees' or</li><li>range 'inception:last_contact'</li></ul></li><li>df row number<ul><li>single row '1' or</li><li>range '1:5'</li></ul></li><li>excel column<ul><li>single cell 'A1' or</li><li>range 'A1:C3'</li></ul></li><li>excel column<ul><li>single column 'A' or</li><li>range 'A:C'</li></ul></li></ul> Options:<ul><li>preset name from the selected \"theme\" (see presets of 'elegant_blue')<ul><li>single preset 'bg_light_blue' or</li><li>list of presets ['bg_light_blue', 'num_fmt_pct']</li></ul></li><li>custom stying kwargs as dictionary as per openpyxl's class names; examples:<ul><li>font__name: 'Arial'</li><li>font__size: 10</li><li>font__bold: True</li><li>fill: 'FFEEB7'</li><li>alignment__horizontal: 'center'</li><li>alignment__vertical: 'center'</li><li>numberformat: '#,##0'</li><li>...</li></ul></li></ul> <p>Examples: (showcasing the many different styling options)</p> <pre><code>style = {'emplyees': ['bg_light_blue', 'num_fmt_pct'], 'F:G': 'num_fmt_pct'}\n</code></pre> <pre><code>style = {'C3:D10': {'font__size': 20, 'numberformat': '#,##0', 'font__italic'=True}, 'employees:customers': {'numberformat': '#,##0'}}\n</code></pre> <pre><code>MY_CUSTOM_WARNING_STYLE = {'font__bold': True, 'text__color': 'ff0000', 'font__size': 20}\nMY_CUSTOM_DATE_STYLE = {'numberformat': 'yyyy-mm-dd'}\n\nstyle = {\n  '1': MY_CUSTOM_WARNING_STYLE, \n  '2:5': {'font__size': 20},\n  'B3:G10': ['bg_light_blue', 'num_fmt_pct'], \n  'A1': {**MY_CUSTOM_WARNING_STYLE, **MY_CUSTOM_DATE_STYLE}\n}\n</code></pre>"},{"location":"styling.html#theme-set-theme-for-entire-excel-file","title":"Theme: Set \"theme\" for entire excel file","text":"<p>In <code>ExcelWriter(..., theme='elegant_blue')</code> you can define the base theme that will be applied to your entire Excel file. You can pass either:</p> <ul> <li>a theme name like 'elegant_blue',</li> <li>or your personal .yml-theme-file path (syntax example here)</li> </ul> <p></p>"}]}